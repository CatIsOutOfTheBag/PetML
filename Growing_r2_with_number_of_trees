# Логичсекие методы. Случайный лес.
# Решение с его помощью задачи регрессии.
# Подбор параметров случайного леса.
# Случайный лес — это модель классификации, объединяющая некоторое
# количество решающих деревьев в одну композицию, за счет чего улуч-
# шается их качество работы и обобщающая способность. Деревья стро-
# ятся независимо друг от друга. Чтобы они отличались друг от друга,
# обучение проводится не на всей обучающей выборке, а на ее случайном
# подмножестве. Также, для дальнейшего уменьшения схожести деревьев,
# оптимальный признак для разбиения выбирается не из всех возможных
# признаков, а лишь из их случайного подмножества. Прогнозы, выданные
# деревьями, объединяются в один ответ путем усреднения.

# Проследим, как будет меняться качество случайного леса в зависимости от количества деревьев
# Датасет abalon - задача предсказания возраста ракушки(числа колец) по физическим измерениям

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
import numpy as np
import pandas as pd

# загрузим датасет
data = pd.read_csv("abalone.csv")
# Преобразуем признак "Sex" в числовой: F:-1, I:0, M:1
data['Sex'] = data['Sex'].map(lambda x: 1 if x =='M' else (-1 if x == 'F' else 0))

# отделим таргет от признаков
X = data.loc[:, 'Sex':'ShellWeight']
y = data.loc[:, 'Rings']

# Обучим случайный лес с разным числом деревьев. От 1 до 50.
# Мера качества - коэффициент детерминации
# посмотрим как будет меняться качество с ростом числа деревьев
k = 5
kf = KFold(n_splits=k, shuffle=True, random_state=1)
r2_mean_scores = []

print("Trees / mean_r2_score")
for trees in range(1, 51):
    r2_mean = 0.
    rfr = RandomForestRegressor(random_state=1, n_estimators=trees)
    # воспользуемся кросс-валидацией на 5 KFold-ах
    score = np.mean(cross_val_score(estimator=rfr, X=X, y=y, cv=kf, scoring='r2', n_jobs=-1)) #флаг -1:параллелим на всех ядрах
    print("{} / {}".format(trees, score))
    # Остановимся на качестве в 0,52
    if score > 0.52:
        print("Limit 0,52 found on {} trees".format(trees))
        break
